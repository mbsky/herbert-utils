<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
		http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.1.xsd"
	default-lazy-init="true">

	<description>Spring公共配置</description>

	<bean
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<!-- 标准配置 -->
				<value>classpath*:/application.properties</value>
				<!-- 本地开发环境配置 -->
				<value>classpath*:/application.local.properties</value>
				<!-- 测试环境配置 -->
				<value>classpath*:/application.test.properties</value>
				<!-- 本地测试环境配置 -->
				<value>classpath*:/application.test-local.properties</value>
			</list>
		</property>
	</bean>

	<!-- 使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入 -->
	<context:annotation-config />
	<context:component-scan base-package="lion">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	<context:component-scan base-package="game">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- spring-data-redis配置 -->
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.server}" />
		<property name="port" value="${redis.port}" />
	</bean>

	<!-- redis template definition -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate" 
		p:connection-factory-ref="jedisConnectionFactory"> </bean>

	<bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean>

	<bean id="protobufRedisTemplate" class="lion.serialize.ProtobufRedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
	</bean>

	<!-- 以静态变量保存ApplicationContext -->
	<!-- bean id="springContextHolder" class="lion.core.SpringContextHolder"
		lazy-init="false" / -->

	<!-- 第一个数据库 Master 负责写 -->
	<bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource"
		destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName">
			<value>${mysql.classname}</value>
		</property>
		<property name="url">
			<value>${mysql.url}</value>
		</property>
		<property name="username">
			<value>${mysql.username}</value>
		</property>
		<property name="password">
			<value>${mysql.password}</value>
		</property>

		<!-- Connection Pooling tomcat-jdbc -->
		<!-- @see http://people.apache.org/~fhanik/jdbc-pool/jdbc-pool.html -->
		<property name="testOnBorrow" value="true" />
		<property name="validationQuery" value="SELECT 1" />
		<property name="testOnReturn" value="false" />
		<property name="validationInterval" value="30000" />
		<property name="timeBetweenEvictionRunsMillis" value="30000" />
		<!-- 初始化时创建的连接数 -->
		<property name="initialSize" value="5" />
		<!-- 最大连接数据库连接数，设置为0时，表示没有限制； -->
		<property name="maxActive" value="30" />
		<!-- 最小等待连接中的数量，设置为0时，表示没有限制； -->
		<property name="minIdle" value="10" />
		<property name="maxIdle" value="10" />
		<!-- 最大等待秒数，单位为毫秒， 超过时间会报出错误信息； -->
		<property name="maxWait" value="30000" />
		<!-- 是否可用预执行 -->
		<!-- property name="poolPreparedStatements" value="true" / -->
		<!-- 设置从数据源中返回的连接是否采用自动提交机制，默认值为 true；false支持事务 -->
		<property name="defaultAutoCommit" value="true" />
	</bean>

	<!-- SqlSessionFactory -->
	<!-- bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
		<property name="configLocation" value="classpath:conf/sqlmap/SqlMapConfig.xml"></property> 
		<property name="dataSource" ref="dataSource" /> <property name="mapperLocations" 
		value="classpath*:conf/sqlmap/mysql/mappers-*.xml"></property> </bean -->

	<!-- SqlQuerySessionFactory -->
	<!-- bean id="sqlQuerySessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
		<property name="configLocation" value="classpath:conf/sqlmap/SqlMapConfig.xml"></property> 
		<property name="dataSource" ref="dataSourceSlave" /> <property name="mapperLocations" 
		value="classpath*:conf/sqlmap/mysql/mappers-*.xml"></property> </bean -->

	<!-- spring jdbc 配置 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"
		abstract="false">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<!-- 以 @Transactional 标注来定义事务 proxy-target-class="true" -->
	<!-- tx:annotation-driven transaction-manager="transactionManager" / -->

	<!--JDBC事务管理器,根据你的情况使用不同的事务管理器 -->
	<!-- bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource">
			<ref local="dataSource" />
		</property>
	</bean -->

	<!-- jetty配置 -->
	<!-- bean id="Server" class="org.eclipse.jetty.server.Server"
		init-method="start" destroy-method="stop" lazy-init="false">
		<property name="threadPool">
			<bean id="defaultThreadPool" class="org.eclipse.jetty.util.thread.QueuedThreadPool">
				<property name="minThreads" value="1" />
				<property name="maxThreads" value="5" />
			</bean>
		</property>
		<property name="connectors">
			<list>
				<bean id="Connector" class="org.eclipse.jetty.server.nio.SelectChannelConnector">
					<property name="port" value="8081" />
					<property name="maxIdleTime" value="30000" />
					<property name="lowResourcesConnections" value="5000" />
					<property name="lowResourcesMaxIdleTime" value="5000" />
					<property name="acceptors" value="2" />
					<property name="statsOn" value="false" />
					<property name="acceptQueueSize" value="500" />
				</bean>
			</list>
		</property>
		<property name="handler">
			<bean id="handlers" class="org.eclipse.jetty.server.handler.HandlerList">
				<property name="handlers">
					<list>
						<bean class="game.http.HelloWorld" />
						<bean class="org.eclipse.jetty.server.handler.DefaultHandler" />
						<bean class="org.eclipse.jetty.server.handler.RequestLogHandler">
							<property name="requestLog">
								<bean class="org.eclipse.jetty.server.NCSARequestLog">
									<property name="append" value="true" />
									<property name="filename" value="/log/jetty.log.yyyy_mm_dd" />
									<property name="extended" value="false" />
									<property name="retainDays" value="999" />
									<property name="filenameDateFormat" value="yyy-MM-dd" />
									<property name="LogTimeZone" value="GMT" />
								</bean>
							</property>
						</bean>
					</list>
				</property>
			</bean>
		</property>
	</bean -->

	<!-- generic cache manager -->
	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches">
			<set>
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="role" />
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="faction" />
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="itemTpl" />
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="goods" />
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="ranking" />
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="mail" />
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="shopTpl" />
			</set>
		</property>
	</bean>

	<!-- async schedule -->
	<task:annotation-driven executor="taskExecutor"
		scheduler="taskScheduler" />
	<!-- task:executor id="gameExecutor" pool-size="20" / -->
	<!-- task:scheduler id="gameScheduler" pool-size="5" / -->

	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="2" />
     	<property name="maxPoolSize" value="20" />
		<property name="waitForTasksToCompleteOnShutdown" value="true" />
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
	</bean>

	<bean id="taskScheduler"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler">
		<property name="poolSize" value="5" />
		<property name="waitForTasksToCompleteOnShutdown" value="true" />
		<property name="rejectedExecutionHandler">
			<bean class="java.util.concurrent.ThreadPoolExecutor$CallerRunsPolicy" />
		</property>
	</bean>

	<!-- schedule execute tasks -->
	<task:scheduled-tasks scheduler="taskScheduler">
		<task:scheduled ref="dataPersistenceManager" method="persistence"
			fixed-rate="60000" />
		<task:scheduled ref="rankingCache" method="timingRefreshRanking"
			cron="0 0 3,12,20 * * ?" />
		<task:scheduled ref="disruptorExecutor" method="submitCommonTimmer"
			fixed-rate="100" />
	</task:scheduled-tasks>

	<bean id="httpServer" 
        class="org.springframework.remoting.support.SimpleHttpServerFactoryBean" lazy-init="false">
	    <property name="contexts">
	        <util:map>
	            <entry key="/test" value-ref="myHandler"/>
	            <entry key="/console" value-ref="consoleHandler"/>
	            <entry key="/scriptCompile" value-ref="scriptCompileHandler"/>
	            <entry key="/scriptRun" value-ref="scriptRunHandler"/>
	            <entry key="/groovyRun" value-ref="groovyRunHandler"/>
	            <entry key="/reloadClass" value-ref="reloadClassHandler"/>
	        </util:map>
	    </property>
	    <property name="port" value="8089" />
	</bean>

	<lang:groovy id="serverStatic" refresh-check-delay="5000"
		script-source="classpath:script/groovy/ServerStatic.groovy">
	</lang:groovy>
	<lang:groovy id="runtimeReload" refresh-check-delay="5000"
		script-source="classpath:script/groovy/RuntimeReload.groovy">
	</lang:groovy>

</beans>