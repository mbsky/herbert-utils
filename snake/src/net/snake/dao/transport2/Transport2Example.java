package net.snake.dao.transport2;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Transport2Example {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table t_transport2
     *
     * @ibatorgenerated Mon Oct 18 10:34:31 GMT 2010
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table t_transport2
     *
     * @ibatorgenerated Mon Oct 18 10:34:31 GMT 2010
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_transport2
     *
     * @ibatorgenerated Mon Oct 18 10:34:31 GMT 2010
     */
    public Transport2Example() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_transport2
     *
     * @ibatorgenerated Mon Oct 18 10:34:31 GMT 2010
     */
    protected Transport2Example(Transport2Example example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_transport2
     *
     * @ibatorgenerated Mon Oct 18 10:34:31 GMT 2010
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_transport2
     *
     * @ibatorgenerated Mon Oct 18 10:34:31 GMT 2010
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_transport2
     *
     * @ibatorgenerated Mon Oct 18 10:34:31 GMT 2010
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_transport2
     *
     * @ibatorgenerated Mon Oct 18 10:34:31 GMT 2010
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_transport2
     *
     * @ibatorgenerated Mon Oct 18 10:34:31 GMT 2010
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_transport2
     *
     * @ibatorgenerated Mon Oct 18 10:34:31 GMT 2010
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table t_transport2
     *
     * @ibatorgenerated Mon Oct 18 10:34:31 GMT 2010
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table t_transport2
     *
     * @ibatorgenerated Mon Oct 18 10:34:31 GMT 2010
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andTransportIdIsNull() {
            addCriterion("f_transport_id is null");
            return this;
        }

        public Criteria andTransportIdIsNotNull() {
            addCriterion("f_transport_id is not null");
            return this;
        }

        public Criteria andTransportIdEqualTo(Integer value) {
            addCriterion("f_transport_id =", value, "transportId");
            return this;
        }

        public Criteria andTransportIdNotEqualTo(Integer value) {
            addCriterion("f_transport_id <>", value, "transportId");
            return this;
        }

        public Criteria andTransportIdGreaterThan(Integer value) {
            addCriterion("f_transport_id >", value, "transportId");
            return this;
        }

        public Criteria andTransportIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("f_transport_id >=", value, "transportId");
            return this;
        }

        public Criteria andTransportIdLessThan(Integer value) {
            addCriterion("f_transport_id <", value, "transportId");
            return this;
        }

        public Criteria andTransportIdLessThanOrEqualTo(Integer value) {
            addCriterion("f_transport_id <=", value, "transportId");
            return this;
        }

        public Criteria andTransportIdIn(List values) {
            addCriterion("f_transport_id in", values, "transportId");
            return this;
        }

        public Criteria andTransportIdNotIn(List values) {
            addCriterion("f_transport_id not in", values, "transportId");
            return this;
        }

        public Criteria andTransportIdBetween(Integer value1, Integer value2) {
            addCriterion("f_transport_id between", value1, value2, "transportId");
            return this;
        }

        public Criteria andTransportIdNotBetween(Integer value1, Integer value2) {
            addCriterion("f_transport_id not between", value1, value2, "transportId");
            return this;
        }

        public Criteria andSceneIdIsNull() {
            addCriterion("f_scene_id is null");
            return this;
        }

        public Criteria andSceneIdIsNotNull() {
            addCriterion("f_scene_id is not null");
            return this;
        }

        public Criteria andSceneIdEqualTo(Integer value) {
            addCriterion("f_scene_id =", value, "sceneId");
            return this;
        }

        public Criteria andSceneIdNotEqualTo(Integer value) {
            addCriterion("f_scene_id <>", value, "sceneId");
            return this;
        }

        public Criteria andSceneIdGreaterThan(Integer value) {
            addCriterion("f_scene_id >", value, "sceneId");
            return this;
        }

        public Criteria andSceneIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("f_scene_id >=", value, "sceneId");
            return this;
        }

        public Criteria andSceneIdLessThan(Integer value) {
            addCriterion("f_scene_id <", value, "sceneId");
            return this;
        }

        public Criteria andSceneIdLessThanOrEqualTo(Integer value) {
            addCriterion("f_scene_id <=", value, "sceneId");
            return this;
        }

        public Criteria andSceneIdIn(List values) {
            addCriterion("f_scene_id in", values, "sceneId");
            return this;
        }

        public Criteria andSceneIdNotIn(List values) {
            addCriterion("f_scene_id not in", values, "sceneId");
            return this;
        }

        public Criteria andSceneIdBetween(Integer value1, Integer value2) {
            addCriterion("f_scene_id between", value1, value2, "sceneId");
            return this;
        }

        public Criteria andSceneIdNotBetween(Integer value1, Integer value2) {
            addCriterion("f_scene_id not between", value1, value2, "sceneId");
            return this;
        }

        public Criteria andXIsNull() {
            addCriterion("f_x is null");
            return this;
        }

        public Criteria andXIsNotNull() {
            addCriterion("f_x is not null");
            return this;
        }

        public Criteria andXEqualTo(Integer value) {
            addCriterion("f_x =", value, "x");
            return this;
        }

        public Criteria andXNotEqualTo(Integer value) {
            addCriterion("f_x <>", value, "x");
            return this;
        }

        public Criteria andXGreaterThan(Integer value) {
            addCriterion("f_x >", value, "x");
            return this;
        }

        public Criteria andXGreaterThanOrEqualTo(Integer value) {
            addCriterion("f_x >=", value, "x");
            return this;
        }

        public Criteria andXLessThan(Integer value) {
            addCriterion("f_x <", value, "x");
            return this;
        }

        public Criteria andXLessThanOrEqualTo(Integer value) {
            addCriterion("f_x <=", value, "x");
            return this;
        }

        public Criteria andXIn(List values) {
            addCriterion("f_x in", values, "x");
            return this;
        }

        public Criteria andXNotIn(List values) {
            addCriterion("f_x not in", values, "x");
            return this;
        }

        public Criteria andXBetween(Integer value1, Integer value2) {
            addCriterion("f_x between", value1, value2, "x");
            return this;
        }

        public Criteria andXNotBetween(Integer value1, Integer value2) {
            addCriterion("f_x not between", value1, value2, "x");
            return this;
        }

        public Criteria andYIsNull() {
            addCriterion("f_y is null");
            return this;
        }

        public Criteria andYIsNotNull() {
            addCriterion("f_y is not null");
            return this;
        }

        public Criteria andYEqualTo(Integer value) {
            addCriterion("f_y =", value, "y");
            return this;
        }

        public Criteria andYNotEqualTo(Integer value) {
            addCriterion("f_y <>", value, "y");
            return this;
        }

        public Criteria andYGreaterThan(Integer value) {
            addCriterion("f_y >", value, "y");
            return this;
        }

        public Criteria andYGreaterThanOrEqualTo(Integer value) {
            addCriterion("f_y >=", value, "y");
            return this;
        }

        public Criteria andYLessThan(Integer value) {
            addCriterion("f_y <", value, "y");
            return this;
        }

        public Criteria andYLessThanOrEqualTo(Integer value) {
            addCriterion("f_y <=", value, "y");
            return this;
        }

        public Criteria andYIn(List values) {
            addCriterion("f_y in", values, "y");
            return this;
        }

        public Criteria andYNotIn(List values) {
            addCriterion("f_y not in", values, "y");
            return this;
        }

        public Criteria andYBetween(Integer value1, Integer value2) {
            addCriterion("f_y between", value1, value2, "y");
            return this;
        }

        public Criteria andYNotBetween(Integer value1, Integer value2) {
            addCriterion("f_y not between", value1, value2, "y");
            return this;
        }

        public Criteria andTargetSceneIdIsNull() {
            addCriterion("f_target_scene_id is null");
            return this;
        }

        public Criteria andTargetSceneIdIsNotNull() {
            addCriterion("f_target_scene_id is not null");
            return this;
        }

        public Criteria andTargetSceneIdEqualTo(Integer value) {
            addCriterion("f_target_scene_id =", value, "targetSceneId");
            return this;
        }

        public Criteria andTargetSceneIdNotEqualTo(Integer value) {
            addCriterion("f_target_scene_id <>", value, "targetSceneId");
            return this;
        }

        public Criteria andTargetSceneIdGreaterThan(Integer value) {
            addCriterion("f_target_scene_id >", value, "targetSceneId");
            return this;
        }

        public Criteria andTargetSceneIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("f_target_scene_id >=", value, "targetSceneId");
            return this;
        }

        public Criteria andTargetSceneIdLessThan(Integer value) {
            addCriterion("f_target_scene_id <", value, "targetSceneId");
            return this;
        }

        public Criteria andTargetSceneIdLessThanOrEqualTo(Integer value) {
            addCriterion("f_target_scene_id <=", value, "targetSceneId");
            return this;
        }

        public Criteria andTargetSceneIdIn(List values) {
            addCriterion("f_target_scene_id in", values, "targetSceneId");
            return this;
        }

        public Criteria andTargetSceneIdNotIn(List values) {
            addCriterion("f_target_scene_id not in", values, "targetSceneId");
            return this;
        }

        public Criteria andTargetSceneIdBetween(Integer value1, Integer value2) {
            addCriterion("f_target_scene_id between", value1, value2, "targetSceneId");
            return this;
        }

        public Criteria andTargetSceneIdNotBetween(Integer value1, Integer value2) {
            addCriterion("f_target_scene_id not between", value1, value2, "targetSceneId");
            return this;
        }

        public Criteria andTargetXIsNull() {
            addCriterion("f_target_x is null");
            return this;
        }

        public Criteria andTargetXIsNotNull() {
            addCriterion("f_target_x is not null");
            return this;
        }

        public Criteria andTargetXEqualTo(Integer value) {
            addCriterion("f_target_x =", value, "targetX");
            return this;
        }

        public Criteria andTargetXNotEqualTo(Integer value) {
            addCriterion("f_target_x <>", value, "targetX");
            return this;
        }

        public Criteria andTargetXGreaterThan(Integer value) {
            addCriterion("f_target_x >", value, "targetX");
            return this;
        }

        public Criteria andTargetXGreaterThanOrEqualTo(Integer value) {
            addCriterion("f_target_x >=", value, "targetX");
            return this;
        }

        public Criteria andTargetXLessThan(Integer value) {
            addCriterion("f_target_x <", value, "targetX");
            return this;
        }

        public Criteria andTargetXLessThanOrEqualTo(Integer value) {
            addCriterion("f_target_x <=", value, "targetX");
            return this;
        }

        public Criteria andTargetXIn(List values) {
            addCriterion("f_target_x in", values, "targetX");
            return this;
        }

        public Criteria andTargetXNotIn(List values) {
            addCriterion("f_target_x not in", values, "targetX");
            return this;
        }

        public Criteria andTargetXBetween(Integer value1, Integer value2) {
            addCriterion("f_target_x between", value1, value2, "targetX");
            return this;
        }

        public Criteria andTargetXNotBetween(Integer value1, Integer value2) {
            addCriterion("f_target_x not between", value1, value2, "targetX");
            return this;
        }

        public Criteria andTargetYIsNull() {
            addCriterion("f_target_y is null");
            return this;
        }

        public Criteria andTargetYIsNotNull() {
            addCriterion("f_target_y is not null");
            return this;
        }

        public Criteria andTargetYEqualTo(Integer value) {
            addCriterion("f_target_y =", value, "targetY");
            return this;
        }

        public Criteria andTargetYNotEqualTo(Integer value) {
            addCriterion("f_target_y <>", value, "targetY");
            return this;
        }

        public Criteria andTargetYGreaterThan(Integer value) {
            addCriterion("f_target_y >", value, "targetY");
            return this;
        }

        public Criteria andTargetYGreaterThanOrEqualTo(Integer value) {
            addCriterion("f_target_y >=", value, "targetY");
            return this;
        }

        public Criteria andTargetYLessThan(Integer value) {
            addCriterion("f_target_y <", value, "targetY");
            return this;
        }

        public Criteria andTargetYLessThanOrEqualTo(Integer value) {
            addCriterion("f_target_y <=", value, "targetY");
            return this;
        }

        public Criteria andTargetYIn(List values) {
            addCriterion("f_target_y in", values, "targetY");
            return this;
        }

        public Criteria andTargetYNotIn(List values) {
            addCriterion("f_target_y not in", values, "targetY");
            return this;
        }

        public Criteria andTargetYBetween(Integer value1, Integer value2) {
            addCriterion("f_target_y between", value1, value2, "targetY");
            return this;
        }

        public Criteria andTargetYNotBetween(Integer value1, Integer value2) {
            addCriterion("f_target_y not between", value1, value2, "targetY");
            return this;
        }
    }
}
